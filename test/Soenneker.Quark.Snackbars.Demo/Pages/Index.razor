@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Components.Builders.Colors
@using Soenneker.Quark.Snackbars.Dtos

@inject ILogger<Index> Logger

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Quark.Snackbars Demo</h1>
            <p class="lead">Simple snackbar notifications for Blazor applications.</p>
        </div>
    </div>

    <!-- SnackbarStack -->
    <SnackbarStack @ref="_snackbarStack" Location="@_currentLocation" Closed="@OnSnackbarClosed">
    </SnackbarStack>

    <!-- Basic Usage -->
    <div class="row mb-4">
        <div class="col-12">
            <h2>Basic Usage</h2>
            <p>Click buttons to show snackbars:</p>
            
            <div class="d-flex flex-wrap gap-2 mb-3">
                <Button Color="Color.Success" OnClick="@(() => _snackbarStack?.Push("Success message!", Color.Success))">
                    Success
                </Button>
                <Button Color="Color.Danger" OnClick="@(() => _snackbarStack?.Push("Error occurred!", Color.Danger))">
                    Error
                </Button>
                <Button Color="Color.Warning" OnClick="@(() => _snackbarStack?.Push("Warning message", Color.Warning))">
                    Warning
                </Button>
                <Button Color="Color.Info" OnClick="@(() => _snackbarStack?.Push("Information", Color.Info))">
                    Info
                </Button>
            </div>
        </div>
    </div>

    <!-- Stacking Demo -->
    <div class="row mb-4">
        <div class="col-12">
            <h2>Stacking</h2>
            <p>Multiple snackbars stack automatically:</p>
            
            <div class="d-flex flex-wrap gap-2 mb-3">
                <Button Color="Color.Primary" OnClick="@ShowMultipleSnackbars">
                    Show 3 Snackbars
                </Button>
                <Button Color="Color.Secondary" OnClick="@ShowRapidSnackbars">
                    Rapid Fire (5)
                </Button>
            </div>
        </div>
    </div>

    <!-- Position Control -->
    <div class="row mb-4">
        <div class="col-12">
            <h2>Positioning</h2>
            <p>Change snackbar position:</p>
            
            <div class="row mb-3">
                <div class="col-md-6">
                    <select class="form-select" @onchange="@OnPositionChanged">
                        <option value="bottom-end" selected="@(_currentLocation == SnackbarLocation.BottomEnd)">Bottom End</option>
                        <option value="bottom-start" selected="@(_currentLocation == SnackbarLocation.BottomStart)">Bottom Start</option>
                        <option value="top-end" selected="@(_currentLocation == SnackbarLocation.TopEnd)">Top End</option>
                        <option value="top-start" selected="@(_currentLocation == SnackbarLocation.TopStart)">Top Start</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <Button Color="Color.Info" OnClick="@(() => _snackbarStack?.Push($"Position: {_currentLocation.Value}", Color.Info))">
                        Test Position
                    </Button>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Examples -->
    <div class="row mb-4">
        <div class="col-12">
            <h2>Advanced</h2>
            <p>Custom timing and complex content:</p>
            
            <div class="d-flex flex-wrap gap-2 mb-3">
                <Button Color="Color.Warning" OnClick="@ShowCustomTiming">
                    Custom Timing (10s)
                </Button>
                <Button Color="Color.Success" OnClick="@ShowComplexContent">
                    Complex Content
                </Button>
            </div>
        </div>
    </div>
</div>

@code {
    private SnackbarStack? _snackbarStack;
    private SnackbarLocation _currentLocation = SnackbarLocation.BottomEnd;

    private Task OnSnackbarClosed(SnackbarClosedEventArgs args)
    {
        Logger.LogInformation($"Snackbar {args.Key} closed: {args.CloseReason}");
        return Task.CompletedTask;
    }

    private Task OnPositionChanged(ChangeEventArgs e)
    {
        var positionValue = e.Value?.ToString();
        _currentLocation = positionValue switch
        {
            "bottom-end" => SnackbarLocation.BottomEnd,
            "bottom-start" => SnackbarLocation.BottomStart,
            "top-end" => SnackbarLocation.TopEnd,
            "top-start" => SnackbarLocation.TopStart,
            _ => SnackbarLocation.BottomEnd
        };
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ShowMultipleSnackbars()
    {
        if (_snackbarStack != null)
        {
            await _snackbarStack.Push("First snackbar", Color.Success);
            await Task.Delay(500);
            await _snackbarStack.Push("Second snackbar", Color.Info);
            await Task.Delay(500);
            await _snackbarStack.Push("Third snackbar", Color.Warning);
        }
    }

    private async Task ShowRapidSnackbars()
    {
        if (_snackbarStack != null)
        {
            for (int i = 1; i <= 5; i++)
            {
                await _snackbarStack.Push($"Snackbar #{i}", Color.Primary);
                await Task.Delay(200);
            }
        }
    }

    private async Task ShowCustomTiming()
    {
        if (_snackbarStack != null)
        {
            await _snackbarStack.Push("This will hide in 10 seconds", Color.Warning, options => options.HideDelay = 10000);
        }
    }

    private async Task ShowComplexContent()
    {
        if (_snackbarStack != null)
        {
            await _snackbarStack.Push(@<div>
                <SnackbarHeader>
                    <strong>Complex Snackbar</strong>
                </SnackbarHeader>
                <SnackbarBody>
                    This snackbar has a header and body with custom content.
                </SnackbarBody>
                <SnackbarFooter>
                    <small class="text-muted">Footer with timestamp</small>
                </SnackbarFooter>
            </div>, Color.Success);
        }
    }
}